C51 COMPILER V9.59.0.0   WIEGAND                                                           10/20/2021 11:54:13 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE WIEGAND
OBJECT MODULE PLACED IN .\hex\wiegand.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE libreria\wiegand.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\libreria) DEB
                    -UG OBJECTEXTEND PRINT(.\wiegand.lst) TABS(2) OBJECT(.\hex\wiegand.obj)

line level    source

   1          #include <reg51.h>
   2          #include "wiegand.h"
   3          
   4          sbit automovil  = P1^7;       //Entrada sensor automovil / Cajon Monedero 
   5          sbit D0L1  = P3^2;
   6          sbit D1L1  = P3^3;
   7          
   8          
   9          #define   WGND_SIZE  34 //26//49//33
  10          #define STX 2
  11          #define ETX 3
  12          
  13          
  14          
  15          //const unsigned char   WGND_SIZE=34 ;  //26//49//33
  16          unsigned char nex_bit=0;
  17          unsigned char completo=0;
  18          unsigned char facility_code=0;
  19          unsigned char card_number=0;
  20          unsigned char card_number1=0;
  21          unsigned char card_number2=0;
  22          unsigned char timer_wiegand=0;
  23          unsigned char codebits[WGND_SIZE +1];//+1
  24          unsigned char buffer_wie[4];
  25          extern unsigned char g_scArrTxComSoft[];
  26          
  27          /*fuciones prototipo*/
  28          extern void cont(unsigned char caracter);
  29          extern void lcd_puts(unsigned char * str);
  30          extern void vdato (unsigned char caracter)  ;
  31          extern void Borra_all(void);
  32          extern void EscribirCadenaSoft(unsigned char tamano_cadena);
  33          extern int sprintf  (char *, const char *, ...);
  34          extern void wait_long1 (unsigned int t) ;
  35          extern bit tx_bus (unsigned char num_chr);
  36          
  37          /*configuracion de bit*/
  38          extern bit Dif_Mot_Car;
  39          /*------------------------------------------------------------------------------
  40          Interrupciones int0 
  41          
  42          codebits=array de almacenamiento de la trama en bits del wiegand
  43          nex_bit= es el contador de bits
  44          WGND_SIZE= es el limite de bits a recibir
  45          completo= es cuando termina de recibir la trama de wiegand
  46          bit0=p bit de paridad
  47          bit1 - bit8 = dato de 8bit llamado A
  48          bit9 - bit16 = dato de 8bits llamado B
  49          bit17 - bit 24 = datos de 8 bits  llamado c
  50          bit25 - bit32 = datos de 8 bits llamado D
  51          bit33=p bit de paridad
  52          
  53          ------------------------------------------------------------------------------*/
  54          
C51 COMPILER V9.59.0.0   WIEGAND                                                           10/20/2021 11:54:13 PAGE 2   

  55          void  ex0_isr (void) interrupt 0 
  56          {
  57   1        
  58   1        
  59   1            /*DOL1 - DATA0
  60   1              lee solo los datos del los bits de (0)*/
  61   1            
  62   1            codebits[nex_bit] = '0';
  63   1            nex_bit++;
  64   1            while(D0L1==1);
  65   1          on_Timer0_Interrup();
  66   1          
  67   1          
  68   1      }
  69          /*------------------------------------------------------------------------------
  70           interrupciones  int1
  71          ------------------------------------------------------------------------------*/  
  72            
  73          void  ex1_isr (void) interrupt 2 
  74          {
  75   1              /*D1L1 - DATA1 
  76   1              lee solo los datos del los bits de (1)*/
  77   1          
  78   1          codebits[nex_bit] = '1';  
  79   1          nex_bit++;
  80   1          while(D1L1==1);
  81   1          on_Timer0_Interrup();
  82   1        
  83   1      
  84   1      }
  85          
  86          /*------------------------------------------------------------------------------
  87          interrupcion por timer 
  88          ValTimeOutCom se decrementa cada overflow de la interrupcion
  89          Timer_wait    Incrementa cada overflow de la interrrupcion
  90          clock=22.1184mhz
  91          ciclo de mqn= clock/12 =0.5nseg
  92          timer= ciclo mqn* reloj = 0.5 x65535 =32
  93          temporizado=timer* ValTimeOutCom = 32*100=320ms
  94          ------------------------------------------------------------------------------*/
  95          void timer0_int() interrupt 1 using 2
  96          {
  97   1            if(timer_wiegand==0)
  98   1            {
  99   2              timer_wiegand=6;
 100   2            completo= 1;
 101   2            }
 102   1            else
 103   1              {
 104   2            
 105   2            timer_wiegand--;
 106   2              }
 107   1            TF0=0;
 108   1      }
 109          void on_Timer0_Interrup(void)
 110          {
 111   1        
 112   1        TF0=0;                  //registro TCON bit 5 bandera de overflow 
 113   1        ET0=1;                  // enable interrupcion bit 1 del registro IENO
 114   1        
 115   1      }
 116          void off_Timer0_Interrup(void)
C51 COMPILER V9.59.0.0   WIEGAND                                                           10/20/2021 11:54:13 PAGE 3   

 117          {
 118   1        ET0=0;                  // enable interrupcion bit 1 del registro IENO
 119   1        
 120   1      }
 121          /*------------------------------------------------------------------------------
 122          Habilito interrupciones int0
 123          ------------------------------------------------------------------------------*/
 124          void ini_ex0(void)
 125          {
 126   1      
 127   1        IT0 = 1 ;               /*detecta flanco de HIGH a low*/
 128   1        EX0 = 1 ;              /*enable interrrup*/
 129   1        
 130   1      }
 131          /*------------------------------------------------------------------------------
 132          Habilito interrupciones  int1
 133          ------------------------------------------------------------------------------*/
 134          void ini_ex1(void)
 135          {
 136   1      
 137   1        IT1 = 1 ;               /*detecta flanco de HIGH a low*/
 138   1        EX1 = 1 ;               /*enable interrrup*/
 139   1        
 140   1      }
 141          /*------------------------------------------------------------------------------
 142          Habilito interrupciones int0, int1
 143          ------------------------------------------------------------------------------*/
 144          void on_ini_ex0_ex1(void)
 145          {
 146   1        EA = 1    ;             /*enable las dos interrupciones*/
 147   1        
 148   1      }
 149          /*------------------------------------------------------------------------------
 150             inicia las interrupciones externas para leer wiegand
 151          ------------------------------------------------------------------------------*/
 152          void inicia_wiegand()
 153          {
 154   1      
 155   1        ini_ex0();
 156   1        ini_ex1();
 157   1        on_ini_ex0_ex1();                                           /*habilita interrupcion global*/
 158   1        limpia_data();
 159   1      }
 160          /*------------------------------------------------------------------------------
 161          rutina que limpia el buffer de lectura de wiegand
 162          ------------------------------------------------------------------------------*/
 163          void limpia_data(void)
 164          {
 165   1      unsigned char i;
 166   1        for(i=0;i<WGND_SIZE+1;i++)
 167   1        { 
 168   2          codebits[i]=0x00;           /*se limpia buffer de bits de wiegand*/
 169   2          nex_bit=0;                  /*contador de bits*/
 170   2          completo=0;                 /*indica que hay un dato de wiegand*/
 171   2        }
 172   1          facility_code=0;
 173   1          card_number=0;
 174   1          card_number1=0;
 175   1          card_number2=0;
 176   1          timer_wiegand=6;
 177   1      }
 178          /*------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   WIEGAND                                                           10/20/2021 11:54:13 PAGE 4   

 179          rutina que ajusta la lectura de wiegand
 180          ------------------------------------------------------------------------------*/
 181          
 182          void ajusta_code(void)
 183          {
 184   1        if(nex_bit==34)
 185   1        {
 186   2          facility_code=bits_wiegand_hex(1);
 187   2          card_number=bits_wiegand_hex(9);
 188   2          card_number1=bits_wiegand_hex(17);
 189   2          card_number2=bits_wiegand_hex(25);
 190   2        }
 191   1        else
 192   1        {
 193   2        facility_code=bits_wiegand_hex(1) ;
 194   2        card_number=bits_wiegand_hex(9) ;
 195   2        card_number1=bits_wiegand_hex(17);
 196   2        }
 197   1        
 198   1      }
 199          
 200          
 201          /*------------------------------------------------------------------------------
 202          rutina que ajusta la lectura de wiegand para 33 bits
 203          ------------------------------------------------------------------------------*/
 204          
 205          void id_Access()
 206          {
 207   1      
 208   1          
 209   1          ajusta_code();                      // lectura MF50 de 33bits
 210   1        if(nex_bit==34)
 211   1          {
 212   2            buffer_wie[0]=card_number;
 213   2            buffer_wie[1]=card_number1;
 214   2            buffer_wie[2]=card_number2;
 215   2          
 216   2          }
 217   1          else
 218   1          {
 219   2            buffer_wie[0]=facility_code;
 220   2            buffer_wie[1]=card_number;
 221   2            buffer_wie[2]=card_number1;
 222   2          }
 223   1      //    
 224   1          lcd_wiegand();
 225   1      
 226   1      }
 227          
 228          /*------------------------------------------------------------------------------
 229          rutina que convierte los bits de lectura de wiegand a hex
 230          bits= es un arreglo donde se realiza una or con cada bit para crear el dato hex 
 231          starting_position= posicion de inicio de analisis del arreglo de bits, para crear el caracter hex
 232          
 233          codebits=Lectura de bits del codigo wiegand
 234          ------------------------------------------------------------------------------*/
 235          
 236          unsigned char  bits_wiegand_hex(unsigned char starting_position)
 237          {
 238   1        unsigned char apx_err  []= "ERROR DE LECTURA" ;
 239   1        unsigned char i,j,code_wiegand=0;
 240   1        unsigned char bits[8]={0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};
C51 COMPILER V9.59.0.0   WIEGAND                                                           10/20/2021 11:54:13 PAGE 5   

 241   1        i=starting_position+8;
 242   1        
 243   1        for(j=starting_position ; j < i ; j++)
 244   1        {
 245   2            if(codebits[j]=='1')
 246   2          {
 247   3              code_wiegand=code_wiegand | bits[j-starting_position];
 248   3          }
 249   2            
 250   2          else if((codebits[j]>'1') || (codebits[j]< '0'))
 251   2           {
 252   3               
 253   3            cont(0x80);
 254   3            lcd_puts(apx_err);
 255   3            code_wiegand=  0;
 256   3            break;  
 257   3           }
 258   2      
 259   2        }
 260   1        return code_wiegand;
 261   1      }
 262          
 263          /*------------------------------------------------------------------------------
 264             muestra el numero de la tarjeta leida en el lcd
 265          ------------------------------------------------------------------------------*/
 266           void lcd_wiegand()
 267           {
 268   1       unsigned int temp;
 269   1       unsigned char buf[6]={0,0,0,0,0,0};
 270   1       unsigned char lectura  []= "LECT.1           " ;
 271   1        Borra_all();                  /*borra el lcd*/
 272   1        cont(0x80);                   /*inicio de la primer ilera del lcd*/
 273   1        lcd_puts(lectura);              /*msj de (LECT.1)*/
 274   1        cont(0x87);                 /*posicion donde se coloca la parte alta del codigo de la tarjeta*/
 275   1                
 276   1      
 277   1        temp=buffer_wie[0];                 
 278   1        sprintf(buf,"%u",temp);             /*convierto el hex a un string bcd*/
 279   1        lcd_puts(buf);
 280   1        vdato('-'); 
 281   1      
 282   1        temp=(buffer_wie[1] <<8)| buffer_wie[2] ;  /*uno los dos registros en uno de 16 bits*/
 283   1        sprintf(buf,"%u",temp);             /*convierto el dato en ascii*/
 284   1        lcd_puts(buf);
 285   1      
 286   1       }
 287          
 288          
 289          
 290          /*------------------------------------------------------------------------------
 291          Rutina que muestra el valor en hex en el lcd
 292          ------------------------------------------------------------------------------*/
 293          /*
 294          void Debug_chr_lcd(unsigned char Dat)
 295          {
 296            unsigned char temp;
 297            
 298              temp=(Dat&0xf0)>>4;
 299              (temp>0x09)?(temp=temp+0x37):(temp=temp+0x30);
 300                
 301              vdato(temp);
 302                         
C51 COMPILER V9.59.0.0   WIEGAND                                                           10/20/2021 11:54:13 PAGE 6   

 303              temp=(Dat&0x0f);
 304              (temp>0x09)?(temp=temp+0x37):(temp=temp+0x30);
 305              vdato(temp);
 306              vdato(' ');
 307            
 308            
 309          }
 310          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    756    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =     46      53
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
